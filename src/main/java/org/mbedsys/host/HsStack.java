/*
 *   Copyright 2014 Emeric Verschuur <emericv@mbedsys.org>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *		   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package org.mbedsys.host;

/**
 * <p>
 * A stack
 * </p>
 * <p>
 * HsStack is an object that represent a stack. This stack is set up when the
 * core is fully initialized.
 * </p>
 * 
 * @author <a href="mailto:emericv@mbedsys.org">Emeric Verschuur</a> Copyright
 *         2014 MbedSYS
 */
public interface HsStack {
	/**
	 * Family of generated services
	 */
	public static final String SERVICE_GENERATE_FAMILY = "family.generate";

	/**
	 * Family of processed services
	 */
	public static final String SERVICE_PROCESS_FAMILY = "family.process";

	/**
	 * Setup this stack. This method is called when the core and all the stacks
	 * are fully initialized
	 * 
	 * @param appContext
	 *            Application context
	 */
	void setup(HsStackContext stackContext) throws Exception;

	/**
	 * This method is called when a service is used/generated by this stack is
	 * restored
	 * 
	 * @param service
	 *            reference to the service
	 */
	void serviceRestore(HsServiceInternal service);

	/**
	 * This method is called when a new service is added
	 * 
	 * @param service
	 *            reference to the service
	 * @return
	 */
	boolean serviceAdd(HsServiceInternal service);

	/**
	 * This method is called when a new service is leaved
	 * 
	 * @param service
	 *            reference to the service
	 * @return
	 */
	void serviceLeave(HsServiceInternal service);
}
